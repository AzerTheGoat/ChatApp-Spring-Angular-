/*
 * GoatChat API
 * server API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import okhttp3.OkHttpClient;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.model.*;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MessageApi
 */
public class MessageApiTest {

    private final MessageApi api = new MessageApi();
    private final UserApi userApi = new UserApi();

    @BeforeEach
    public void init() throws ApiException {
        OkHttpClient.Builder builder = new OkHttpClient.Builder();
        OkHttpClient okHttpClient = builder.cookieJar(new MyCookieJar()).build();
        ApiClient apiClient = new ApiClient(okHttpClient);
        userApi.setApiClient(apiClient);
        api.setApiClient(apiClient);
    }

    /**
     * POST message/getAllMessagesOfConversation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllMessageOfConversationTest() throws ApiException {
        UserCredentialsDTO user1 = new UserCredentialsDTO()
                .login("usefrkeezzkre1")
                .password("pwd1");
        UserCredentialsDTO user2 = new UserCredentialsDTO()
                .login("usergezezlrje2")
                .password("pwd2");

        userApi.signup(user1);
        userApi.signup(user2);
        userApi.signin(user1);

        NewMessageDTO messageDTO = new NewMessageDTO();
        messageDTO.setTo(user2.getLogin());
        messageDTO.setBody("Ceci est un message testt");
        messageDTO.setType("string");

        api.messagePost(messageDTO);
        api.messagePost(messageDTO);
        api.messagePost(messageDTO);
        UserProfileDTO userProfileDTO = new UserProfileDTO();
        userProfileDTO.setLogin(user2.getLogin());

        List<Message> messages = api.getAllMessageOfConversation(userProfileDTO);

        // Verify that at least three messages are returned
        Assertions.assertTrue(messages.size() >= 3);




        userApi.delete(user1.getLogin());
        userApi.signout();
        userApi.signin(user2);
        userApi.delete(user2.getLogin());
        userApi.signout();
    }

    /**
     * POST message/getLastMessagesOfConversation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLastMessageOfConversationTest() throws ApiException {
        UserCredentialsDTO user1 = new UserCredentialsDTO()
                .login("userkeerzzkre1")
                .password("pwd1");
        UserCredentialsDTO user2 = new UserCredentialsDTO()
                .login("userezrezlrje2")
                .password("pwd2");

        userApi.signup(user1);
        userApi.signup(user2);
        userApi.signin(user1);

        NewMessageDTO messageDTO = new NewMessageDTO();
        messageDTO.setTo(user2.getLogin());
        messageDTO.setBody("Ceci est un message testt");
        messageDTO.setType("string");

        api.messagePost(messageDTO);
        api.messagePost(messageDTO);
        api.messagePost(messageDTO);
        UserProfileDTO userProfileDTO = new UserProfileDTO();
        userProfileDTO.setLogin(user2.getLogin());

        Message lastMessage = api.getLastMessageOfConversation(userProfileDTO);

        // Verify that the last message is not null
        Assertions.assertNotNull(lastMessage);


        userApi.delete(user1.getLogin());
        userApi.signout();
        userApi.signin(user2);
        userApi.delete(user2.getLogin());
        userApi.signout();


    }

    /**
     * POST message
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void messagePostTest() throws ApiException {
        UserCredentialsDTO user1 = new UserCredentialsDTO()
                .login("usezrrkeezzkre1")
                .password("pwd1");
        UserCredentialsDTO user2 = new UserCredentialsDTO()
                .login("userzzezezlrje2")
                .password("pwd2");

        userApi.signup(user1);
        userApi.signup(user2);
        userApi.signin(user1);

        NewMessageDTO messageDTO = new NewMessageDTO();
        messageDTO.setTo(user2.getLogin());
        messageDTO.setBody("Ceci est un message testt");
        messageDTO.setType("string");

        api.messagePost(messageDTO);
        api.messagePost(messageDTO);
        api.messagePost(messageDTO);
        UserProfileDTO userProfileDTO = new UserProfileDTO();
        userProfileDTO.setLogin(user2.getLogin());

        MessageDTO response = api.messagePost(messageDTO);
        Assertions.assertNotNull(response);


        userApi.delete(user1.getLogin());
        userApi.signout();
        userApi.signin(user2);
        userApi.delete(user2.getLogin());
        userApi.signout();


    }

}
