/*
 * GoatChat API
 * server API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import okhttp3.OkHttpClient;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.model.*;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ConversationApi
 */
public class ConversationApiTest {
    private final ConversationApi conversationApi = new ConversationApi();
    private final UserApi userApi = new UserApi();
    private final MessageApi messageApi = new MessageApi();

    @BeforeEach
    public void init() throws ApiException {
        OkHttpClient.Builder builder = new OkHttpClient.Builder();
        OkHttpClient okHttpClient = builder.cookieJar(new MyCookieJar()).build();
        ApiClient apiClient = new ApiClient(okHttpClient);
        userApi.setApiClient(apiClient);
        conversationApi.setApiClient(apiClient);
        messageApi.setApiClient(apiClient);
    }
    /**
     * POST conversation/addConversation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addConversationTest() throws ApiException { //finalement cette methode n'est pas utilis√© dans mon back faut que je la supprime
        // Create two users for the conversation
        UserCredentialsDTO user1 = new UserCredentialsDTO()
                .login("userkeeezkre1")
                .password("pwd1");
        UserCredentialsDTO user2 = new UserCredentialsDTO()
                .login("userezrfzrlrje2")
                .password("pwdf2");

        // Sign up and sign in both users
        userApi.signup(user1);
        userApi.signup(user2);
        userApi.signin(user1);
        // Create a conversation between user1 and user2
        Conversation conversation = new Conversation();
        conversation.setUsername1(user1.getLogin());
        conversation.setUsername2(user2.getLogin());

        // Try to add the conversation FAIRE CE TEST PLUS TARD
        /*Conversation addedConversation = conversationApi.addConversation(conversation);

        // Verify that the conversation was added successfully
        Assertions.assertNotNull(addedConversation);
        Assertions.assertEquals(user1.getLogin(), addedConversation.getUsername1());
        Assertions.assertEquals(user2.getLogin(), addedConversation.getUsername2());
         */

        // Clean up by deleting the users and signing out
        userApi.delete(user1.getLogin());
        userApi.signout();
        userApi.signin(user2);
        userApi.delete(user2.getLogin());
        userApi.signout();
    }


    /**
     * GET conversation/getAllConversationsOfUser
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllConversationOfUserTest() throws ApiException {
        UserCredentialsDTO user1 = new UserCredentialsDTO()
                .login("userkeezztvrzerzfrzfzkre1")
                .password("pwd1");
        UserCredentialsDTO user2 = new UserCredentialsDTO()
                .login("userefvfzezervzlrje2")
                .password("pwd2");
        UserCredentialsDTO user3 = new UserCredentialsDTO()
                .login("userefevzzrezezlrje3")
                .password("pwd2");

        userApi.signup(user1);
        userApi.signup(user2);
        userApi.signup(user3);
        userApi.signin(user1);

        NewMessageDTO messageDTO = new NewMessageDTO();
        messageDTO.setTo(user2.getLogin());
        messageDTO.setBody("Ceci est un message testt");
        messageDTO.setType("string");

        messageApi.messagePost(messageDTO);
        messageApi.messagePost(messageDTO);

        NewMessageDTO messageDTO2 = new NewMessageDTO();
        messageDTO2.setTo(user3.getLogin());
        messageDTO2.setBody("Ceci est un message testt");
        messageDTO2.setType("string");

        messageApi.messagePost(messageDTO2);
        messageApi.messagePost(messageDTO2);

        // Get all conversations for the current user FAIRE CE TEST PLUS TARD!!!!!!!!
        //ConversationDisplayDTO conversations = conversationApi.getAllConversationOfUser();

        // Verify that there are conversations returned
        //System.out.println(conversations);


        userApi.delete(user1.getLogin());
        userApi.signout();
        userApi.signin(user2);
        userApi.delete(user2.getLogin());
        userApi.signout();
        userApi.signin(user3);
        userApi.delete(user3.getLogin());
        userApi.signout();
    }

}
